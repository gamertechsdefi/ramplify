import { NextResponse, NextRequest } from 'next/server';
import nodemailer from 'nodemailer';

export async function POST(request: NextRequest) {
  try {
    const {
      transactionType,
      nairaAmount,
      cryptoAmount,
      selectedCrypto,
      walletAddress,
      exchangeRate,
      bankName,
      accountName,
      accountNumber
    } = await request.json();

    // Input validation based on transaction type
    if (transactionType === 'offramp') {
      if (!cryptoAmount || !selectedCrypto || !nairaAmount || !walletAddress || !bankName || !accountName || !accountNumber) {
        return NextResponse.json(
          {
            error: 'Missing required fields',
            message: 'Please provide all offramp transaction details',
          },
          { status: 400 }
        );
      }
    } else {
      // Default onramp validation
      if (!nairaAmount || !cryptoAmount || !selectedCrypto || !walletAddress) {
        return NextResponse.json(
          {
            error: 'Missing required fields',
            message: 'Please provide all transaction details',
          },
          { status: 400 }
        );
      }
    }

    // Generate transaction reference
    const transactionRef = transactionType === 'offramp'
      ? `OFFRAMP-${Date.now().toString().slice(-8)}`
      : `ONRAMP-${Date.now().toString().slice(-8)}`;
    const timestamp = new Date().toLocaleString();

    // Create nodemailer transporter
    const transporter = nodemailer.createTransport({
      service: 'gmail',
      auth: {
        user: process.env.GMAIL_USER, // Your Gmail address
        pass: process.env.GMAIL_APP_PASSWORD, // Your Gmail App Password
      },
    });

    // Email content based on transaction type
    const isOfframp = transactionType === 'offramp';

    const mailOptions = {
      from: process.env.GMAIL_USER,
      to: "ramplify.org@gmail.com",
      subject: `${isOfframp ? '🔄' : '🚀'} New ${isOfframp ? 'Offramp' : 'Onramp'} Transaction - ${transactionRef}`,
      html: isOfframp ? `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h2 style="color: #dc2626;">🔄 New Offramp Transaction</h2>

          <div style="background-color: #fef2f2; padding: 20px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #dc2626;">
            <h3 style="margin-top: 0; color: #991b1b;">Transaction Details</h3>
            <p><strong>📋 Transaction ID:</strong> ${transactionRef}</p>
            <p><strong>🪙 Crypto Amount:</strong> ${cryptoAmount} ${selectedCrypto}</p>
            <p><strong>💰 Naira Amount:</strong> ₦${parseFloat(nairaAmount).toLocaleString()}</p>
            <p><strong>📈 Exchange Rate:</strong> 1 ${selectedCrypto} = ₦${parseFloat(exchangeRate).toLocaleString()}</p>
            <p><strong>📱 Wallet Address:</strong> <code style="background-color: #e5e7eb; padding: 2px 4px; border-radius: 4px;">${walletAddress}</code></p>
            <p><strong>⏰ Time:</strong> ${timestamp}</p>
            <p><strong>🔄 Status:</strong> <span style="color: #dc2626; font-weight: bold;">Awaiting Crypto Transfer</span></p>
          </div>

          <div style="background-color: #f0f9ff; padding: 20px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #0ea5e9;">
            <h3 style="margin-top: 0; color: #0c4a6e;">Bank Details for Payment</h3>
            <p><strong>🏦 Bank Name:</strong> ${bankName}</p>
            <p><strong>👤 Account Name:</strong> ${accountName}</p>
            <p><strong>🔢 Account Number:</strong> <code style="background-color: #e5e7eb; padding: 2px 4px; border-radius: 4px; font-size: 16px;">${accountNumber}</code></p>
          </div>

          <div style="background-color: #fef3c7; padding: 15px; border-radius: 8px; border-left: 4px solid #f59e0b;">
            <p style="margin: 0;"><strong>⚠️ Action Required:</strong></p>
            <ol style="margin: 10px 0; padding-left: 20px;">
              <li>Wait for user to send <strong>${cryptoAmount} ${selectedCrypto}</strong> to the specified wallet</li>
              <li>Verify the crypto transaction on blockchain</li>
              <li>Send <strong>₦${parseFloat(nairaAmount).toLocaleString()}</strong> to the bank account above</li>
              <li>Confirm transaction completion with user</li>
            </ol>
          </div>

          <div style="margin-top: 20px; padding: 15px; background-color: #f9fafb; border-radius: 8px;">
            <p style="margin: 0; font-size: 12px; color: #6b7280;">
              This email was automatically generated by Ramplify when a user initiated an offramp transaction.
            </p>
          </div>
        </div>
      ` : `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h2 style="color: #16a34a;">🚀 New Onramp Transaction</h2>

          <div style="background-color: #f0fdf4; padding: 20px; border-radius: 8px; margin: 20px 0;">
            <h3 style="margin-top: 0; color: #15803d;">Transaction Details</h3>
            <p><strong>📋 Transaction ID:</strong> ${transactionRef}</p>
            <p><strong>💰 Amount Sent:</strong> ₦${parseFloat(nairaAmount).toLocaleString()}</p>
            <p><strong>🪙 Amount to Receive:</strong> ${cryptoAmount} ${selectedCrypto}</p>
            <p><strong>📱 Wallet Address:</strong> <code style="background-color: #e5e7eb; padding: 2px 4px; border-radius: 4px;">${walletAddress}</code></p>
            <p><strong>⏰ Time:</strong> ${timestamp}</p>
            <p><strong>🔄 Status:</strong> <span style="color: #dc2626; font-weight: bold;">Pending Processing</span></p>
          </div>

          <div style="background-color: #fef3c7; padding: 15px; border-radius: 8px; border-left: 4px solid #f59e0b;">
            <p style="margin: 0;"><strong>⚠️ Action Required:</strong> Please process this transaction and send ${cryptoAmount} ${selectedCrypto} to the wallet address above.</p>
          </div>

          <div style="margin-top: 20px; padding: 15px; background-color: #f9fafb; border-radius: 8px;">
            <p style="margin: 0; font-size: 12px; color: #6b7280;">
              This email was automatically generated by Ramplify when a user confirmed their payment.
            </p>
          </div>
        </div>
      `,
    };

    // Send email
    await transporter.sendMail(mailOptions);

    return NextResponse.json(
      {
        success: true,
        transactionRef,
        message: 'Transaction notification sent to email successfully',
      },
      { status: 200 }
    );

  } catch (error) {
    console.error('Error sending email notification:', error);
    return NextResponse.json(
      {
        error: 'Internal server error',
        message: 'Failed to send email notification',
      },
      { status: 500 }
    );
  }
}